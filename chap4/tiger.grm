structure A = Absyn
structure S = Symbol

fun negative (exp : A.exp, pos : int) : A.exp =
  A.OpExp { left=A.IntExp 0, oper=A.MinusOp, right=exp, pos=pos}

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  program of A.exp | exp of A.exp
        | expseq of (A.exp * pos) list
        | explist of A.exp list | args of A.exp list
        (* | dec of A.dec | decs of A.dec list *)
        (* | tydec of A.tydec | vardec of A.VarDec | fundec of A.fundec *)
        (* | ty of A.ty | tyfield of A.field *)
        (* | tyfields of A.field list | tyfields_list of A.field list *)
        (* | lvalue of A.exp *)
        | arith_exp of A.exp | cmp_exp of A.exp | bool_exp of A.exp
        (* | record_creation | field | field_list | field_list_nonempty | array_creation *)
        (* | assign_exp *)

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%right DO THEN ELSE           (* For dangling ELSE and DO blocks *)
%right OF                     (* For array creation
                               * e.g. var A = arr_t[n] of x * y
                               *                           ^
                               * The correct behavior shifts (don't reduce at x)
                               *)

%%

program	: exp	                                           (exp)

(* ------------------------------------------------------------------------ *)
(* Declarations *)

(* decs *)
(*     :                                                    () *)
(*     | decs dec                                           () *)

(* dec *)
(*     : tydec                                              () *)
(*     | vardec                                             () *)
(*     | fundec                                             () *)

(* tydec *)
(*     : TYPE ID EQ ty                                      () *)

(* ty *)
(*     : ID                                                 () *)
(*     | LBRACE tyfields RBRACE                             () *)
(*     | ARRAY OF ID                                        () *)

(* tyfield *)
(*     : ID COLON ID                                        () *)

(* tyfields *)
(*     :                                                    () *)
(*     | tyfields_list                                      () *)

(* tyfields_list *)
(*     : tyfield                                            () *)
(*     | tyfields_list COMMA tyfield                        () *)

(* vardec *)
(*     : VAR ID ASSIGN exp                                  () *)
(*     | VAR ID COLON ID ASSIGN exp                         () *)

(* fundec *)
(*     : FUNCTION ID LPAREN tyfields RPAREN EQ exp          () *)
(*     | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp () *)

(* ------------------------------------------------------------------------ *)
(* Variables *)

(* lvalue *)
(*     : ID                       () *)
(*     | lvalue DOT ID            () *)
(*     | ID LBRACK exp RBRACK     () (* redundant case *) *)
(*     | lvalue LBRACK exp RBRACK () *)

(* ------------------------------------------------------------------------ *)
(* Expressions *)

exp
    : NIL                                   (A.NilExp)
    (* : lvalue                                () *)
    | LPAREN RPAREN                         (A.NilExp)
    | LPAREN expseq RPAREN                  (A.SeqExp expseq)
    | INT                                   (A.IntExp INT)
    | STRING                                (A.StringExp (STRING, STRINGleft))
    | MINUS exp                %prec UMINUS (negative (exp, MINUSleft))
    | ID LPAREN args RPAREN                 (A.CallExp { (* function call *)
                                                  func = S.symbol ID,
                                                  args = args,
                                                  pos = IDleft
                                            })
    | arith_exp                             (arith_exp)
    | cmp_exp                               (cmp_exp)
    | bool_exp                              (bool_exp)
    (* | record_creation                       () *)
    (* | array_creation                        () *)
    (* | assign_exp                            () *)
    | IF exp THEN exp ELSE exp              (A.IfExp {
                                                  test = exp1,
                                                  then' = exp2,
                                                  else' = SOME exp3,
                                                  pos = IFleft })
    | IF exp THEN exp                       (A.IfExp {
                                                  test = exp1,
                                                  then' = exp2,
                                                  else' = NONE,
                                                  pos = IFleft })
    | WHILE exp DO exp                      (A.WhileExp {
                                                  test = exp1,
                                                  body = exp2,
                                                  pos = WHILEleft })
    | FOR ID ASSIGN exp TO exp DO exp       (A.ForExp {
                                                  var = S.symbol ID,
                                                  escape = ref true,
                                                  lo = exp1,
                                                  hi = exp2,
                                                  body = exp3,
                                                  pos = FORleft })
    | BREAK                                 (A.BreakExp BREAKleft)
    (* | LET decs IN expseq END                () *)
    (* | LET decs IN END                       () *)

arith_exp
    : exp PLUS exp    (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
    | exp MINUS exp   (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})
    | exp TIMES exp   (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
    | exp DIVIDE exp  (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})

cmp_exp
    : exp EQ exp   (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=EQleft})
    | exp NEQ exp  (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft})
    | exp LT exp   (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=LTleft})
    | exp LE exp   (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=LEleft})
    | exp GT exp   (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=GTleft})
    | exp GE exp   (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=GEleft})

bool_exp
    : exp AND exp                           (A.IfExp {
                                                  test = exp1,
                                                  then' = exp2,
                                                  else' = SOME (A.IntExp 0),
                                                  pos = ANDleft})
    | exp OR exp                            (A.IfExp {
                                                  test = exp1,
                                                  then' = A.IntExp 1,
                                                  else' = SOME exp2,
                                                  pos = ORleft})

(* record_creation *)
(*     : ID LBRACE field_list RBRACE           () *)

(* field *)
(*     : ID EQ exp                             () *)

(* field_list *)
(*     :                                       () *)
(*     | field_list_nonempty                   () *)

(* field_list_nonempty *)
(*     : field                                 () *)
(*     | field_list_nonempty COMMA field       () *)

(* array_creation *)
(*     : ID LBRACK exp RBRACK OF exp           () *)

(* assign_exp *)
(*     : lvalue ASSIGN exp                     () *)

expseq
    : exp                     ([(exp, expleft)])
    | expseq SEMICOLON exp    (expseq @ [(exp, expleft)])

args
    :                         ([])
    | explist                 (explist)

explist
    : exp                     ([exp])
    | explist COMMA exp       (explist @ [exp])
